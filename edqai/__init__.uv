from tvm import auto_scheduler
task = auto_scheduler.SearchTask(func=MyModule["mm_relu"], args=(A, B, C), target="llvm")
task.tune(...)
from edqai.optimizations.tvm_mm_relu import optimize_mm_relu
C = optimize_mm_relu(A, B)
rt_lib = tvm.build(sch.mod, target="cuda")
def optimize_mm_relu(A: np.ndarray, B: np.ndarray):
    import tvm
    dtype = "float32"
    mod = MyModuleWithAxisRemapSugar
    sch = tvm.tir.Schedule(mod)
    block_Y = sch.get_block("Y", func_name="mm_relu")
    i, j, k = sch.get_loops(block_Y)
    j0, j1 = sch.split(j, factors=[None, 4])
    sch.reorder(j0, k, j1)
    block_C = sch.get_block("C", "mm_relu")
    sch.reverse_compute_at(block_C, j0)
    sch.decompose_reduction(block_Y, k)
    rt_lib = tvm.build(sch.mod, target="llvm")
    f = rt_lib["mm_relu"]
    a_nd = tvm.nd.array(A)
    b_nd = tvm.nd.array(B)
    c_nd = tvm.nd.empty((128, 128), dtype=dtype)
    f(a_nd, b_nd, c_nd)
    return c_nd.numpy()
